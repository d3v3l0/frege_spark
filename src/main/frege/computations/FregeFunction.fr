module computations.FregeFunction where

import model.DataSet
import frege.test.QuickCheck

--
-- filters
--



filterHighRain :: DataSet -> Bool
filterHighRain ds = case (ds.rre150z0) of (Nothing) -> false
                                          (Just d) -> d > 5
                                          
filterHighRainFromStringArray :: [String] -> Bool
filterHighRainFromStringArray xs = case (String.double(xs!!9)) of (Left e)  -> false
                                                                  (Right d) -> d > 5
                                                                  
                                                                
--
-- mappers
--

mapGetTemperature :: DataSet -> Double
mapGetTemperature ds = case (ds.tre200s0) of (Nothing) -> 0 -- TODO filter out invalid results
                                             (Just d) -> d
                                             
mapGetTemperatureFromStringArray :: [String] -> Double
mapGetTemperatureFromStringArray xs = case (String.double(xs!!10)) of (Left e)  -> 0
                                                                      (Right d) -> d

--
-- reducers
--
                                          
getSum :: [Double] -> Double
getSum [] = 0
getSum (x:xs) = x + getSum xs