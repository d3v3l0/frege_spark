module CSVUtil where

import frege.test.QuickCheck
import DataSet
import Data.List 

main :: IO ()
main = println $ "CSVUtil"

-- https://stackoverflow.com/questions/4978578/how-to-split-a-string-in-haskell
separateBy :: Eq a => a -> [a] -> [[a]]
separateBy chr = unfoldr sep where
  sep [] = Nothing
  sep l  = Just . fmap (drop 1) . break (== chr) $ l
 
csvParseString :: String -> [[Char]]
csvParseString xs = csvParse (unpacked xs)

csvParseStringToStringArray :: String -> [String]
csvParseStringToStringArray xs = map packed (csvParse (unpacked xs))
                      
csvParse :: [Char] -> [[Char]]
csvParse xs = (separateBy (',')  xs)
 
convertToStringArray :: [String] -> [[String]]
convertToStringArray xs = map (CSVUtil.csvParseStringToStringArray) xs

convertToDataSet :: [String] -> [DataSet]
convertToDataSet xs = map (CSVUtil.convertLineToDataSet . CSVUtil.csvParseString) xs

 
convertLineToDataSet :: [[Char]] -> DataSet
convertLineToDataSet xs =
  DataSet
  { stn = packed (xs!! 0)
  , time = packed (xs!! 1)
  , dkl010z0 = String.integer $ packed (xs!! 2)
  , fu3010z0 = String.double $ packed (xs!! 3)
  , fu3010z1 = String.double $ packed (xs!! 4)
  , pp0qffs0 = String.double $ packed (xs!! 5)
  , pp0qnhs0 = String.double $ packed (xs!! 6)
  , prestas0 = String.double $ packed (xs!! 7)
  , sre000z0 = String.integer $ packed (xs!! 8)
  , rre150z0 = String.double $ packed (xs!! 9)
  , tre200s0 = String.double $ packed (xs!! 10)
  , ure200s0 = String.integer $ packed (xs!! 11)
}

testDataSet::DataSet
testDataSet = ((convertLineToDataSet (csvParse (unpacked "PLF,2018-06-25 16:00:00+0000,46,18.7,29.5,,1022.8,902.6,0,6,16.8,57"))))
convertLineToDataSetTest_stn = once $ testDataSet.stn == "PLF"
convertLineToDataSetTest_time = once $ testDataSet.time == "2018-06-25 16:00:00+0000"
convertLineToDataSetTest_dkl010z0 = once $ getValue testDataSet.dkl010z0 == 46
convertLineToDataSetTest_fu3010z0 = once $ getValue testDataSet.fu3010z0 == 18.7
convertLineToDataSetTest_fu3010z1 = once $ getValue testDataSet.fu3010z1 == 29.5
--convertLineToDataSetTest_pp0qffs0 = once $ testDataSet.pp0qffs0 == (Left e)
convertLineToDataSetTest_pp0qnhs0 = once $ getValue testDataSet.pp0qnhs0 == 1022.8
convertLineToDataSetTest_prestas0 = once $ getValue testDataSet.prestas0 == 902.6
convertLineToDataSetTest_sre000z0 = once $ getValue testDataSet.sre000z0 == 0
convertLineToDataSetTest_rre150z0 = once $ getValue testDataSet.rre150z0 == 6
convertLineToDataSetTest_tre200s0 = once $ getValue testDataSet.tre200s0 == 16.8
convertLineToDataSetTest_ure200s0 = once $ getValue testDataSet.ure200s0 == 57

getValue :: (NumberFormatException|a) -> a
getValue (Right a) = a