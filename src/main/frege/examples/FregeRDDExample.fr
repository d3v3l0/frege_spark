module examples.FregeRDDExample where

import bindings.spark.SparkConf
import frege.java.Util
import examples.helpers.FregeHelpers
import bindings.spark.JavaSparkContext
import frege.test.QuickCheck

main :: IO ()
main = do
  sparkConfig <- SparkConf.new ()
  sparkConfig.setMaster "local"
  sparkConfig.setAppName "Frege-Spark"

  -- sc :: MutableIO JavaSparkContext
  sc :: MutableIO JavaSparkContext <- JavaSparkContext.new sparkConfig
   
  -- currentData :: JavaRDD.JavaRDD String
  currentData <- JavaSparkContext.textFile sc "data/first.csv"
  -- collectedData :: MutableIO (List String)
  collectedData <- currentData.collect

  -- collectedDataEntry :: Maybe String
  collectedDataEntry <- collectedData.get 0
  print "collectedDataEntry: "
  println $ show $ collectedDataEntry

  -- iterator :: MutableIO (Iterator String)
  iterator <- (collectedData.iterator)
  -- currentList :: [String]
  currentList <- (iterator.toList)
  -- parsedList :: [Double]
  parsedList = map readString currentList
  --filteredList :: [Double]
  filteredList = filter (isThreeOrFive) parsedList
  -- mappedList :: [Double]
  mappedList = map addOne filteredList
  -- sum :: Double
  sum = foldr getSum 0.0 mappedList


  -- print insights and results

  currentFirst = head currentList
  print $ "currentFirst: "
  println $ currentFirst

  parsedFirst =  head parsedList
  print $ "parsedFirst: "
  println $ show $ parsedFirst
  
  filteredFirst =  head filteredList
  print $ "filteredFirst: "
  println $ filteredFirst
  
  mappedFirst = head mappedList
  print $ "mappedFirst: "
  println $ mappedFirst
  
  print $ "sum: "
  println $ sum
  
  scMaster :: String <- sc.master
  println $ "calculated with master: " ++ scMaster
  println "finished FregeRDDExample"
