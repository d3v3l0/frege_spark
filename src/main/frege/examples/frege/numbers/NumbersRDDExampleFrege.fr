module examples.frege.numbers.NumbersRDDExampleFrege where

import spark.bindings.SparkConf
import spark.bindings.custom.Function
import spark.bindings.custom.Function2
import frege.java.Util
import util.CSVUtil
import examples.frege.numbers.FregeHelpers

import spark.bindings.JavaSparkContext

import frege.test.QuickCheck

main :: IO ()
main = do
  sparkConfig <- SparkConf.new ()
  sparkConfig.setMaster "local"
  sparkConfig.setAppName "Frege-Spark"
  sc :: MutableIO JavaSparkContext <- JavaSparkContext.new sparkConfig
    
  currentData <- JavaSparkContext.textFile sc "data/numbers.csv"
  
  cp::Mutable t (List String) <- currentData.collect
  elem::Maybe String <- cp.get 0
  iterator:: MutableIO (Iterator String) <- (cp.iterator)
  currentList :: [String] <- (iterator.toList)

  parsedList = map readString currentList
  filteredList = filter (\x -> isThreeOrFiveM x) parsedList
  mappedList = map addOneM filteredList
  sum = foldr getSumM (Just 0.0) mappedList

  -- print insights and results

  currentFirst = head currentList
  
  print $ "currentFirst: "
  println $ currentFirst

  parsedFirst = getValueOfMaybe $ head parsedList
  
  print $ "parsedFirst: "
  println $ show $ parsedFirst
  
  filteredFirst = getValueOfMaybe $ head filteredList
  
  print $ "filteredFirst: "
  println $ filteredFirst
    
  mappedFirst = getValueOfMaybe $ head mappedList
  
  print $ "mappedFirst: "
  println $ mappedFirst
  
  print $ "sum: "
  println $ getValueOfMaybe $ sum
  

  println "final"
