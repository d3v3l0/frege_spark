module examples.frege.numbers.FunctionRDDExample where

import spark.bindings.SparkConf
import spark.bindings.custom.CustomFunction
import spark.bindings.custom.CustomFunction2
import spark.bindings.custom.TestBindings
import spark.bindings.JavaSparkContext

main :: IO ()
main = computeInFrege

timesTen :: Double -> Double
timesTen x = x * 10.0

isThree :: Double -> Bool
isThree 3 = true
isThree _ = false

computeInFrege :: IO ()
computeInFrege = do
  --list <- arrayFromListST ["frege-spark.jar"]
  sparkConfig <- SparkConf.new ()
  --sparkConfig.setMaster "spark://Damians-MacBook.local:7077"
  sparkConfig.setMaster "local"
  sparkConfig.setAppName "Frege-Spark"
  --sparkConfig.setJars list

  sc :: MutableIO JavaSparkContext <- JavaSparkContext.new sparkConfig
    
  currentData <- JavaSparkContext.textFile sc "data/first.csv"
  parsedData = currentData.map  Function.convertToDouble

  --filteredData <- parsedData.filter  CustomFunction.filterThreeOrFiveOnDouble
 -- filteredData <- parsedData.filter  (CustomFunction.filterThreeOrFiveFrege (\x -> x == 3.0))
  filteredData = parsedData.filter  (Function.filterThreeOrFiveFrege isThree)
  mappedData = filteredData.map  Function.addOne
  sum = mappedData.reduce Function2.getSum
  
  currentFirst = currentData.first
  assertEquals "1" currentFirst

  parsedFirst = parsedData.first
  assertEquals 1.0 parsedFirst 
    
  filteredFirst = filteredData.first
  assertEquals 3.0 filteredFirst

  mappedFirst = mappedData.first
  assertEquals 4.0 mappedFirst
  
  assertEquals 10.0 sum

  println "finaldk"
