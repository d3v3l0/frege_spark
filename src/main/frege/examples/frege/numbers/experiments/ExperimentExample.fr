module examples.frege.numbers.ExperimentExample where

import spark.bindings.SparkConf
import bindings.Function
import bindings.Function2
import spark.bindings.custom.CustomFunction
import spark.bindings.custom.TestBindings
import spark.bindings.JavaSparkContext
import spark.config.Config
import spark.bindings.custom.CustomFunction2

native module where {
  public static class NativeFunction {
 	public static <A> org.apache.spark.api.java.function.Function<A, Boolean> createNativeFilterFunction() {

		return new org.apache.spark.api.java.function.Function<A, Boolean>() {
			public Boolean call(A x) {	
				System.out.println("printed from native filter function");
				return (Boolean) (((Double) x) == 30.0);
			}
		};
	};
  }
}

--pure native createNativeFilterFunction        TryoutIntegrationExampleFrege.NativeFunction.createNativeFilterFunction      {a} :: () -> Function a Bool
--native createNativeFilterFunction        TryoutIntegrationExampleFrege.NativeFunction.createNativeFilterFunction      {a} :: () -> STMutable s (Function a Bool)
native createNativeFilterFunction        TryoutIntegrationExampleFrege.NativeFunction.createNativeFilterFunction      {a} :: () -> IOMutable (Function a Bool)


-- TODO how to create a frege method that returns a Function

main :: IO ()
main = do
  --result <- runJava 3.0
  --println "fromFrege"
  --println result

  --myFunction <-
  sparkConfig <- SparkConf.new ()
  --println fregecJar
  --list <- arrayFromListST [applicationJar, fregecJar, interpreterJar]
  sparkConfig.setAppName "Frege-Spark"
  --sparkConfig.setJars list
  sparkConfig.setMaster "local"
  --sparkConfig.setMaster "spark://Damians-MacBook.local:7077"
  sc <- JavaSparkContext.new sparkConfig
  currentData <- JavaSparkContext.textFile sc "data/first.csv" 
  --myRDD <- currentData
    --currentData
  currentFirst = currentData.first
  --myFirst <- currentFirst
  
  println  $ currentFirst
  --assertEquals "1" currentFirst

  --currentData = JavaSparkContext.textFile sc "data/first.csv"
  parsedData = currentData.map CustomFunction.Function.convertToDouble
  filteredData = parsedData.filter  Function.filterThreeOrFiveOnDouble
  mappedData = filteredData.map CustomFunction.Function.timesTen
  sum = mappedData.reduce CustomFunction2.Function2.getSum

  currentFirst = currentData.first
  assertEquals "1" currentFirst

  parsedFirst = parsedData.first
  assertEquals 1.0 parsedFirst

  filteredFirst = filteredData.first
  assertEquals 3.0 filteredFirst 
  
  mappedFirst = mappedData.first
  assertEquals 30.0 mappedFirst  

  assertEquals 80.0 sum

  scMaster :: String <- sc.master
  println $ "calculated with master: " ++ scMaster
  
  println "final7"
