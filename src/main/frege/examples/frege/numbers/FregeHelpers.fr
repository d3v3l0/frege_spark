module examples.frege.numbers.FregeHelpers where

import frege.java.Util

import spark.bindings.JavaSparkContext

import frege.test.QuickCheck

-- filter
isThreeOrFiveM Nothing = false
isThreeOrFiveM (Just x) = (x == 3.0 || x == 5.0)

isThreeOrFive x = (x == 3.0 || x == 5.0)

-- map
addOneM :: (Maybe Double) -> Maybe Double
addOneM Nothing = Nothing
addOneM (Just x) = (Just (x+1))

addOne :: Double -> Double
addOne x = x+1

-- reduce
getSum :: Double -> Double -> Double
getSum x y = x + y

getSumM :: (Maybe Double) -> (Maybe Double) -> (Maybe Double)
getSumM Nothing Nothing = Just 0
getSumM (Just x) Nothing = Just x
getSumM (Nothing) (Just y) = Just y
getSumM (Just x) (Just y) = Just (x + y)

readString :: String -> Maybe Double
readString x = undefined -- TODO
--readValue $ String.double x

getValueOfMaybe (Just x) = x

parseTest = once $ map readString ["0", "1", "2", "3", "4", "5", "6", "7"] == [(Just 0.0), (Just 1.0), (Just 2.0), (Just 3.0), (Just 4.0), (Just 5.0), (Just 6.0), (Just 7.0)]
filterTest = once $ filter (\x -> isThreeOrFiveM x) [(Just 0.0), (Just 1.0), (Just 2.0), (Just 3.0), (Just 4.0), (Just 5.0), (Just 6.0), (Just 7.0)] == [(Just 3.0), (Just 5.0)]
mapTest = once $ map addOneM [(Just 3.0), (Just 5.0)] == [(Just 4.0), (Just 6.0)]
sumTest = once $ foldr getSumM (Just 0.0) [(Just 4.0), (Just 6.0)] == (Just 10.0)