module examples.frege.numbers.InterpretationExampleFrege where

import spark.bindings.SparkConf
import bindings.Function
--import bindings.Function2
import spark.bindings.custom.CustomFunction2
import spark.bindings.custom.CustomFunction
import spark.bindings.custom.TestBindings
import spark.bindings.JavaSparkContext
import spark.config.Config

main :: IO ()
main = do
  sparkConfig <- SparkConf.new ()
  println fregecJar
  list <- arrayFromListST [applicationJar, fregecJar, "jars/frege-interpreter-core-1.3-SNAPSHOT.jar"]
  sparkConfig.setAppName "Frege-Spark"
  sparkConfig.setJars list
  --sparkConfig.setMaster "local"
  sparkConfig.setMaster "spark://Damians-MacBook.local:7077"
  sc :: MutableIO JavaSparkContext <- JavaSparkContext.new sparkConfig
  
  currentData <- JavaSparkContext.textFile sc "data/first.csv"
  parsedData = currentData.map CustomFunction.Function.convertToDouble
  --mappedData <- parsedData.map $ Function.Function.createInterpretedFunction "timesTen"
  --mappedData <- parsedData.map $ Function.Function.createFunction ()
  --mappedData <- parsedData.map $ Function.Function.createJavaFunction ()
  mappedData = parsedData.map $ Function.Function.createInterpretStringFunction "f x = x * 10.0" 
  filteredData = mappedData.filter $ Function.Function.createInterpretedFunction "filterThirtyOrFifty"

 
  --sum <- mappedData.reduce $ Function2.createInterpretedFunction "sum"
  sum = mappedData.reduce Function2.getSum

  currentFirst = currentData.first
  assertEquals "1" currentFirst

  parsedFirst = parsedData.first
  assertEquals 1.0 parsedFirst

  mappedFirst = mappedData.first
  assertEquals 10.0 mappedFirst 
  
  filteredFirst = filteredData.first
  assertEquals 30.0 filteredFirst 

  assertEquals 80.0 sum

  scMaster :: String <- sc.master
  println $ "calculated with master: " ++ scMaster
  println "final3"
