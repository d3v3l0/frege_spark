module examples.frege.numbers.DataSetNumbersExampleFrege where

import spark.bindings.SparkConf
import spark.bindings.sql.SQLContext
import spark.bindings.sql.DataFrameReader
import spark.bindings.sql.DataSet
import spark.bindings.sql.Row
import spark.bindings.JavaSparkContext
import spark.bindings.custom.Encoder
import frege.java.Util
import examples.frege.numbers.FregeHelpers

import frege.test.QuickCheck



main :: IO ()
main = do
  sparkConfig <- SparkConf.new ()
  sparkConfig.setMaster "local"
  sparkConfig.setAppName "Frege-Spark"
  sc :: MutableIO JavaSparkContext <- JavaSparkContext.new sparkConfig
  sqlContext :: MutableIO SQLContext <- SQLContext.new sc
  dataFrameReader :: MutableIO (DataFrameReader) <- SQLContext.read sqlContext
  df1 <- dataFrameReader.format "csv"
  df2 <- df1.option "inferSchema" "true"
  currentData :: MutableIO (DataSet Row) <- df1.load "data/first.csv"
  parsedDoubleData :: MutableIO (DataSet Double) <- currentData.as(Encoder.doubleEncoder)
  list :: MutableIO (List Double) <- parsedDoubleData.collectAsList
  iterator:: MutableIO (Iterator Double) <- (list.iterator)
  currentList :: [Double] <- (iterator.toList)
  
  filteredList = filter (\x -> isThreeOrFive x) currentList
  mappedList = map addOne filteredList
  sum = foldr getSum 0.0 mappedList

  -- print insights and results

  currentFirst = head currentList
  
  print $ "currentFirst: "
  println $ currentFirst
  
  filteredFirst = head filteredList
  
  print $ "filteredFirst: "
  println $ filteredFirst
    
  mappedFirst = head mappedList
  
  print $ "mappedFirst: "
  println $ mappedFirst
  
  print $ "sum: "
  println $ sum
  


  println "final6"
