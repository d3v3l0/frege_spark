module ComputeInFregeOnStringArrayExample where

import spark.bindings.JavaSparkContext
import spark.bindings.SparkConf
import spark.bindings.JavaRDD
import util.CSVUtil
import frege.java.Util
import spark.bindings.Function
import spark.bindings.Function2
import frege.test.QuickCheck
import model.DataSet
import computations.FregeFunction
import spark.config.Config

main :: IO ()
main = computeInFrege

computeInFrege :: IO ()
computeInFrege = do
  sparkConfig <- SparkConf.new ()
  sparkConfig.setMaster "local"
  sparkConfig.setAppName "Frege-Spark"
  sc :: MutableIO JavaSparkContext <- JavaSparkContext.new sparkConfig
  currentData :: Mutable s (JavaRDD String) <- JavaSparkContext.textFile sc Config.file
  count <- currentData.count
  println $ show (Long.double count)
  first:: String <- currentData.first
  println $ first
  -- how to work with element in a Mutable
  cp::Mutable t (List String) <- currentData.collect
  elem::Maybe String <- cp.get 0
  iterator:: MutableIO (Iterator String) <- (cp.iterator)
  
  --M a >>= (a -> M b)
 -- IO String  >>= ( String -> IO () )
 -- (a) >>= (b -> println b)
 -- b <- (a);
 -- println b;
  
  
  list :: [String] <- (iterator.toList)
  -- TODO what are the requirements for bindings   --  type is : IO () expected: StringJ t1
	--StringJ is not an instance of Bind
 
  print $ "Average temperature of measurements with high rain: "
  println $ getSum (map mapGetTemperatureFromStringArray (filter filterHighRainFromStringArray (CSVUtil.convertToStringArray list))) / Int.double (length (filter filterHighRainFromStringArray (convertToStringArray list)))
