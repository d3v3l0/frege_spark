module examples.frege.ComputeInFregeOnDataSetExample where

import spark.bindings.JavaSparkContext
import spark.bindings.SparkConf
import spark.bindings.JavaRDD
import util.CSVUtil
import frege.java.Util
import spark.bindings.Function
import spark.bindings.Function2
import frege.test.QuickCheck
import model.DataSet
import computations.FregeFunction
import spark.config.Config

main :: IO ()
main = computeInFrege

computeInFrege :: IO ()
computeInFrege = do
  sparkConfig <- SparkConf.new ()
  sparkConfig.setMaster "local"
  sparkConfig.setAppName "Frege-Spark"
  sc :: MutableIO JavaSparkContext <- JavaSparkContext.new sparkConfig
  currentData :: Mutable s (JavaRDD String) <- JavaSparkContext.textFile sc Config.file
  count <- currentData.count
  println $ show (Long.double count)
  first:: String <- currentData.first
  println $ first
  
  
  
  
  cp::Mutable t (List String) <- currentData.collect
  elem::Maybe String <- cp.get 0
  iterator:: MutableIO (Iterator String) <- (cp.iterator)
  list :: [String] <- (iterator.toList)
  
  dataSetList = CSVUtil.convertToDataSet list
  filtered = filter filterHighRain dataSetList
  mapped = map mapGetTemperature filtered
  sum = getSum mapped
  count = Int.double $ length filtered
  print $ "First Average temperature of measurements with high rain: "
  println $ sum / count
  

  {-
  print $ "Second Average temperature of measurements with high rain: "
  result = map mapGetTemperature (filter filterHighRain dataSetList)
  sum1 = getSum result
  count1 = Int.double $ length result
  println $ sum1 / count1
  -}
  
  print $ "Third Average temperature of measurements with high rain: "
  println $ getSum (map mapGetTemperature (filter filterHighRain (CSVUtil.convertToDataSet list))) / Int.double (length (filter filterHighRain (convertToDataSet list)))
