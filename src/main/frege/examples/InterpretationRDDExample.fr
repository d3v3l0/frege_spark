module examples.InterpretationRDDExample where

import bindings.spark.SparkConf
import bindings.Function
--import bindings.Function2
import bindings.custom.CustomFunction2
import bindings.custom.CustomFunction
import bindings.testing.TestBindings
import bindings.spark.JavaSparkContext
import config.Config

main :: IO ()
main = do
  sparkConfig <- SparkConf.new ()
  println fregecJar
  list <- arrayFromListST [applicationJar, fregecJar, interpreterJar]
  sparkConfig.setAppName "Frege-Spark"
  sparkConfig.setJars list
  sparkConfig.setMaster "local"
  --sparkConfig.setMaster distributedSparkMaster
  sc :: MutableIO JavaSparkContext <- JavaSparkContext.new sparkConfig
  
  currentData <- JavaSparkContext.textFile sc "data/first.csv"
  parsedData = currentData.map CustomFunction.Function.convertToDouble
  filteredData = parsedData.filter $ Function.Function.createInterpretedFunction "filterThreeOrFive"
  mappedData = filteredData.map $ Function.Function.createInterpretScriptFunction "f x = x * 10.0" 

  --mappedData <- parsedData.map $ Function.Function.createInterpretedFunction "timesTen"
  --mappedData <- parsedData.map $ Function.Function.createFunction ()
  --mappedData <- parsedData.map $ Function.Function.createJavaFunction ()

  --sum <- mappedData.reduce $ Function2.createInterpretedFunction "sum"
  sum = mappedData.reduce Function2.getSum

  currentFirst = currentData.first
  assertEquals "1" currentFirst

  parsedFirst = parsedData.first
  assertEquals 1.0 parsedFirst
  
  filteredFirst = filteredData.first
  assertEquals 3.0 filteredFirst 
  
  mappedFirst = mappedData.first
  assertEquals 30.0 mappedFirst 

  assertEquals 80.0 sum

  scMaster :: String <- sc.master
  println $ "calculated with master: " ++ scMaster
  println "finished InterpretationExampleFrege"
