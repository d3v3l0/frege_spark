module examples.java.JavaBindingsOnDataSetExample where

import spark.bindings.JavaSparkContext
import spark.bindings.SparkConf
import spark.bindings.JavaRDD
import spark.bindings.Function
import spark.bindings.Function2
import frege.test.QuickCheck
import spark.config.Config
import util.CSVUtil
import model.DataSet

main :: IO ()
main = basicSpark

--add :: Double -> Double -> Double
--add a b = a + b

--filterFunction = Function.fromLambda (dataSet::DataSet -> dataSet.)
--parseFunction :: Function String [String]
--parseFunction = Function.typedFromLambda myParseFunction 

--myParseFunction :: String -> [String]
--myParseFunction = csvParseStringToStringArray

--f :: Function String Bool
--f = Function.typedFromLambda (== "1")

basicSpark :: IO ()
basicSpark = do
  sparkConfig <- SparkConf.new ()
  sparkConfig.setMaster "local"
  sparkConfig.setAppName "Frege-Spark"
  sc <- JavaSparkContext.new sparkConfig
    
  currentData <- JavaSparkContext.textFile sc  Config.file
  --parsedData <- currentData.filter f

  --parsedData <- currentData.map parseFunction
  --filteredData <- parsedData.filter  Function.filterHighRainFromDataSet
  --mappedData <- filteredData.map  Function.getTemperatureFromDataSet
  --averageTemperature <- mappedData.reduce  Function2.getSum
  
  {-



  currentData <- JavaSparkContext.textFile sc  Config.file
  parsedData <- currentData.map  Function.parseLineToDataSet
  filteredData <- parsedData.filter  Function.filterHighRainFromDataSet
  mappedData <- filteredData.map  Function.getTemperatureFromDataSet
  averageTemperature <- mappedData.reduce  Function2.getSum
  
    -}
  {-
  currentData <- JavaSparkContext.textFile sc Config.file
  parsedData <- currentData.map  Function.parseLineToStringArray
  averageTemperature <- currentData.map  Function.parseLineToStringArray >>= 
   _.filter  Function.filterHighRainFromStringArray >>=
   _.map  Function.getTemperatureFromStringArray
   _.reduce  Function2.getSum
-}
  
  --count <- mappedData.count
  --putStrLn $ "Average temperature of measurements with high rain: " ++ (show (averageTemperature / Long.double count))  
  putStrLn $ "1"
  
