module interpreter.InterpreterExample where

import Interpreter.FregeInterpreter
import Control.monad.trans.MonadIO
import Compiler.types.Global hiding (Message, Severity, liftIO)
import Compiler.types.Global (Message CompilerMessage, Severity())
import frege.repl.FregeRepl
import Control.monad.State

main = do
  eval "addOne x = x + 1.0"
--  eval "a = 1"
--  eval "test x = x + 1"
  

data ReplResult = ReplInfo [Message]
                | CodeInfo {
                    sourceRepr :: SourceInfo,
                    compilerState :: Global,
                    messages :: [Message]
                  }
                | JavaSource String
                
                
eval line = do
  loader <- InterpreterClassLoader.new ()
  (res, newState) <- liftIO $ Interpreter.run (interpret line) InterpreterConfig.initialState loader
  case res of
    InterpreterResult.Success{sourceRepr=sourceRepr, compilerState=g} -> do
      println $ sourceRepr
      println $ "success"
      case sourceRepr of
      {-  Module moduleName -> do
          let importModuleStmt = "import " ++ moduleName
          Repl.modify ReplEnv.{lastJavaGenSrc=Just line,
                               state = newState}
          newEnv <- Repl.get
          let updatePredefs predefs = predefs ++ "\n" ++ importModuleStmt
          when (not $ containsStr newEnv.config.predefs importModuleStmt) $
            Repl.modify ReplEnv.{config <- InterpreterConfig.{predefs<-updatePredefs},
                                 lineStart <- succ}
          return $ CodeInfo sourceRepr g (Message.fromGlobal g)
          -}
        Definitions syms -> do
          let updatePredefs predefs | null predefs = line
              updatePredefs predefs = predefs ++ "\n" ++ line
             -- newSyms = filter (\sym -> sym.pos.line >= env.lineStart) syms
          println $ line
          --c <- CodeInfo sourceRepr g (Message.fromGlobal g)
          StateT.put newState

          {-Repl.modify ReplEnv.{
            lastJavaGenSrc = Nothing,
            lineStart <- ((+) (length . lines $ line)),
            config <- InterpreterConfig.{predefs <- updatePredefs}}
          return $ CodeInfo (Definitions newSyms) g (filter wanted $ Message.fromGlobal g)
        -}
    
        Expression {} -> do
          println $ line
          println $   Message.fromGlobal g
          StateT.put newState
         --Repl.modify ReplEnv.{lastJavaGenSrc=Just line, state = newState}
          --return $ CodeInfo sourceRepr g (filter wanted $ Message.fromGlobal g)
  
    InterpreterResult.Failure messages -> println $ messages

  println $ "test"